// This file is auto-generated by @hey-api/openapi-ts

import type {
  Client,
  Options as ClientOptions,
  TDataShape,
} from '@hey-api/client-fetch'
import { client as _heyApiClient } from './client.gen'
import type {
  AgentQueryData,
  AgentQueryError,
  AgentQueryResponse,
  AnthropicAgentQueryData,
  AnthropicAgentQueryError,
  AnthropicAgentQueryResponse,
  CreateCompanyData,
  CreateCompanyError,
  CreateCompanyResponse,
  CreateCompanyWithNewGraphData,
  CreateCompanyWithNewGraphError,
  CreateCompanyWithNewGraphResponse,
  CreateLeadData,
  CreateLeadError,
  CreateLeadResponse,
  CreateScheduleData,
  CreateScheduleError,
  CreateUserApiKeyData,
  CreateUserApiKeyError,
  CreateUserApiKeyResponse,
  DeleteCompanyData,
  DeleteCompanyError,
  DeleteCompanyResponse,
  DeleteLeadData,
  DeleteLeadError,
  DeleteLeadResponse,
  GetCompanyData,
  GetCompanyError,
  GetCompanyHealthData,
  GetCompanyHealthError,
  GetCompanyResponse,
  GetCurrentAuthUserData,
  GetCurrentAuthUserError,
  GetCurrentAuthUserResponse,
  GetCurrentUserData,
  GetCurrentUserError,
  GetCurrentUserResponse,
  GetLeadData,
  GetLeadError,
  GetLeadResponse,
  GetLeadsData,
  GetLeadsError,
  GetLeadsResponse,
  GetServiceStatusData,
  GetUserGraphsData,
  GetUserGraphsError,
  GetUserGraphsResponse,
  ListCompaniesData,
  ListCompaniesError,
  ListCompaniesResponse,
  ListUserApiKeysData,
  ListUserApiKeysError,
  ListUserApiKeysResponse,
  LoginUserData,
  LoginUserError,
  LoginUserResponse,
  LogoutUserData,
  LogoutUserError,
  LogoutUserResponse,
  OpenaiAgentQueryData,
  OpenaiAgentQueryError,
  OpenaiAgentQueryResponse,
  PlaidSyncData,
  PlaidSyncError,
  QuickbooksSyncData,
  QuickbooksSyncError,
  RefreshSessionData,
  RefreshSessionError,
  RefreshSessionResponse,
  RegisterUserData,
  RegisterUserError,
  RegisterUserResponse,
  RevokeUserApiKeyData,
  RevokeUserApiKeyError,
  SecSyncData,
  SecSyncError,
  SelectUserGraphData,
  SelectUserGraphError,
  UpdateCompanyData,
  UpdateCompanyError,
  UpdateCompanyResponse,
  UpdateLeadData,
  UpdateLeadError,
  UpdateLeadResponse,
  UpdateUserApiKeyData,
  UpdateUserApiKeyError,
  UpdateUserApiKeyResponse,
} from './types.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Register New User
 * Register a new user account with email and password.
 */
export const registerUser = <ThrowOnError extends boolean = false>(
  options: Options<RegisterUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    RegisterUserResponse,
    RegisterUserError,
    ThrowOnError
  >({
    url: '/v1/auth/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * User Login
 * Authenticate user with email and password.
 */
export const loginUser = <ThrowOnError extends boolean = false>(
  options: Options<LoginUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    LoginUserResponse,
    LoginUserError,
    ThrowOnError
  >({
    url: '/v1/auth/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * User Logout
 * Logout user and invalidate session.
 */
export const logoutUser = <ThrowOnError extends boolean = false>(
  options?: Options<LogoutUserData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    LogoutUserResponse,
    LogoutUserError,
    ThrowOnError
  >({
    url: '/v1/auth/logout',
    ...options,
  })
}

/**
 * Get Current User
 * Get current authenticated user from session.
 */
export const getCurrentAuthUser = <ThrowOnError extends boolean = false>(
  options?: Options<GetCurrentAuthUserData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCurrentAuthUserResponse,
    GetCurrentAuthUserError,
    ThrowOnError
  >({
    url: '/v1/auth/me',
    ...options,
  })
}

/**
 * Refresh Session
 * Refresh user session and extend authentication token.
 */
export const refreshSession = <ThrowOnError extends boolean = false>(
  options?: Options<RefreshSessionData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    RefreshSessionResponse,
    RefreshSessionError,
    ThrowOnError
  >({
    url: '/v1/auth/refresh',
    ...options,
  })
}

/**
 * Agent
 * Agent endpoint that uses an AI agent to answer questions about the database.
 */
export const agentQuery = <ThrowOnError extends boolean = false>(
  options: Options<AgentQueryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AgentQueryResponse,
    AgentQueryError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/agent/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Openai Agent
 * Agent endpoint that uses an OpenAI agent to answer questions about the database.
 */
export const openaiAgentQuery = <ThrowOnError extends boolean = false>(
  options: Options<OpenaiAgentQueryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    OpenaiAgentQueryResponse,
    OpenaiAgentQueryError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/agent/openai',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Anthropic Agent
 * Agent endpoint that uses an Anthropic MCP client to answer questions about the database.
 */
export const anthropicAgentQuery = <ThrowOnError extends boolean = false>(
  options: Options<AnthropicAgentQueryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AnthropicAgentQueryResponse,
    AnthropicAgentQueryError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/agent/anthropic',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Create Schedule
 */
export const createSchedule = <ThrowOnError extends boolean = false>(
  options: Options<CreateScheduleData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    CreateScheduleError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/schedule/schedule',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Sec Sync
 */
export const secSync = <ThrowOnError extends boolean = false>(
  options: Options<SecSyncData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    SecSyncError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/sync/sec',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Quickbooks Sync
 */
export const quickbooksSync = <ThrowOnError extends boolean = false>(
  options: Options<QuickbooksSyncData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    QuickbooksSyncError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/sync/qb',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Plaid Sync
 */
export const plaidSync = <ThrowOnError extends boolean = false>(
  options: Options<PlaidSyncData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    PlaidSyncError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/sync/plaid',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Service Status
 * Service status endpoint for AWS load balancer and monitoring.
 *
 * This endpoint is unprotected and used by:
 * - AWS Application Load Balancer health checks
 * - AWS ECS service health checks
 * - CloudFormation monitoring
 * - External monitoring systems
 *
 * Returns:
 * Simple status message indicating service is healthy
 */
export const getServiceStatus = <ThrowOnError extends boolean = false>(
  options?: Options<GetServiceStatusData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: '/v1/status',
      ...options,
    }
  )
}

/**
 * Get Current User
 * Returns information about the currently authenticated user.
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<GetCurrentUserData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCurrentUserResponse,
    GetCurrentUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/user/',
    ...options,
  })
}

/**
 * Get User Graphs
 * Get all graph databases accessible to the current user.
 */
export const getUserGraphs = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserGraphsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserGraphsResponse,
    GetUserGraphsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/user/graphs',
    ...options,
  })
}

/**
 * Select User Graph
 * Select a specific graph as the active graph for the user.
 */
export const selectUserGraph = <ThrowOnError extends boolean = false>(
  options: Options<SelectUserGraphData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    SelectUserGraphError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/user/graphs/select/{graph_id}',
    ...options,
  })
}

/**
 * List API Keys
 * Get all API keys for the current user.
 */
export const listUserApiKeys = <ThrowOnError extends boolean = false>(
  options?: Options<ListUserApiKeysData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListUserApiKeysResponse,
    ListUserApiKeysError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/user/api-keys',
    ...options,
  })
}

/**
 * Create API Key
 * Create a new API key for the current user.
 */
export const createUserApiKey = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserApiKeyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserApiKeyResponse,
    CreateUserApiKeyError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/user/api-keys',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Revoke API Key
 * Revoke (deactivate) an API key.
 */
export const revokeUserApiKey = <ThrowOnError extends boolean = false>(
  options: Options<RevokeUserApiKeyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    RevokeUserApiKeyError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/user/api-keys/{api_key_id}',
    ...options,
  })
}

/**
 * Update API Key
 * Update an API key's name or description.
 */
export const updateUserApiKey = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserApiKeyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateUserApiKeyResponse,
    UpdateUserApiKeyError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/user/api-keys/{api_key_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * List Companies
 * List companies in the specified graph.
 *
 * Args:
 * graph_id: Graph database identifier
 * limit: Maximum number of companies to return
 * offset: Number of companies to skip
 * search: Optional search term for company names
 * current_user: Authenticated user
 *
 * Returns:
 * List of companies with pagination info
 */
export const listCompanies = <ThrowOnError extends boolean = false>(
  options: Options<ListCompaniesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListCompaniesResponse,
    ListCompaniesError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/{graph_id}/company/',
    ...options,
  })
}

/**
 * Create Company
 * Create a new company in the specified graph.
 *
 * Args:
 * company_data: Company creation data
 * graph_id: Graph database identifier
 * current_user: Authenticated user
 *
 * Returns:
 * Created company information
 */
export const createCompany = <ThrowOnError extends boolean = false>(
  options: Options<CreateCompanyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCompanyResponse,
    CreateCompanyError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/{graph_id}/company/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete Company
 * Delete a company and all its relationships from the specified graph.
 *
 * Args:
 * graph_id: Graph database identifier
 * company_id: Company identifier
 * current_user: Authenticated user
 */
export const deleteCompany = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCompanyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCompanyResponse,
    DeleteCompanyError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/{graph_id}/company/{company_id}',
    ...options,
  })
}

/**
 * Get Company
 * Get a specific company by ID.
 *
 * Args:
 * graph_id: Graph database identifier
 * company_id: Company identifier
 * current_user: Authenticated user
 *
 * Returns:
 * Company information
 */
export const getCompany = <ThrowOnError extends boolean = false>(
  options: Options<GetCompanyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCompanyResponse,
    GetCompanyError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/{graph_id}/company/{company_id}',
    ...options,
  })
}

/**
 * Update Company
 * Update a company in the specified graph.
 *
 * Args:
 * company_data: Company update data
 * graph_id: Graph database identifier
 * company_id: Company identifier
 * current_user: Authenticated user
 *
 * Returns:
 * Updated company information
 */
export const updateCompany = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCompanyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCompanyResponse,
    UpdateCompanyError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/{graph_id}/company/{company_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Get Company Health
 * Get health status of the graph database.
 *
 * Args:
 * graph_id: Graph database identifier
 * company_id: Company identifier
 * current_user: Authenticated user
 *
 * Returns:
 * Health status information
 */
export const getCompanyHealth = <ThrowOnError extends boolean = false>(
  options: Options<GetCompanyHealthData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetCompanyHealthError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/{graph_id}/company/{company_id}/health',
    ...options,
  })
}

/**
 * Get Leads
 * Get paginated list of leads.
 */
export const getLeads = <ThrowOnError extends boolean = false>(
  options: Options<GetLeadsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetLeadsResponse,
    GetLeadsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/{graph_id}/lead/',
    ...options,
  })
}

/**
 * Create Lead
 * Create a new lead.
 */
export const createLead = <ThrowOnError extends boolean = false>(
  options: Options<CreateLeadData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateLeadResponse,
    CreateLeadError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/{graph_id}/lead/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete Lead
 * Delete a specific lead.
 */
export const deleteLead = <ThrowOnError extends boolean = false>(
  options: Options<DeleteLeadData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteLeadResponse,
    DeleteLeadError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/{graph_id}/lead/{lead_id}',
    ...options,
  })
}

/**
 * Get Lead
 * Get a specific lead by ID.
 */
export const getLead = <ThrowOnError extends boolean = false>(
  options: Options<GetLeadData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetLeadResponse,
    GetLeadError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/{graph_id}/lead/{lead_id}',
    ...options,
  })
}

/**
 * Update Lead
 * Update a specific lead.
 */
export const updateLead = <ThrowOnError extends boolean = false>(
  options: Options<UpdateLeadData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateLeadResponse,
    UpdateLeadError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/{graph_id}/lead/{lead_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Create Company With New Graph
 * Create a new company with its own graph database.
 *
 * This endpoint creates a new graph database and the first company within it.
 * Used for creating new holding companies or independent business entities.
 *
 * Args:
 * company_data: Company creation data
 *
 * Returns:
 * Graph ID and created company information
 */
export const createCompanyWithNewGraph = <ThrowOnError extends boolean = false>(
  options: Options<CreateCompanyWithNewGraphData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCompanyWithNewGraphResponse,
    CreateCompanyWithNewGraphError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/v1/company/with-new-graph',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}
