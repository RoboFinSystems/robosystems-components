// This file is auto-generated by @hey-api/openapi-ts

/**
 * API key information response model.
 */
export type ApiKeyInfo = {
  /**
   * API key ID
   */
  id: string
  /**
   * API key name
   */
  name: string
  /**
   * API key description
   */
  description?: string | null
  /**
   * API key prefix for identification
   */
  prefix: string
  /**
   * Whether the key is active
   */
  is_active: boolean
  /**
   * Last used timestamp
   */
  last_used_at?: string | null
  /**
   * Creation timestamp
   */
  created_at: string
}

/**
 * Response model for listing API keys.
 */
export type ApiKeysResponse = {
  /**
   * List of user's API keys
   */
  api_keys: Array<ApiKeyInfo>
}

/**
 * Provider account information.
 */
export type AccountInfo = {
  /**
   * Authentication provider ID (e.g., 'github', 'google')
   */
  provider: string
  /**
   * Type of provider
   */
  provider_type: string
  /**
   * Account ID at the provider
   */
  provider_account_id: string
}

export type AgentRequest = {
  message: string
  history?: Array<Message> | null
  database: string
}

export type AgentResponse = {
  response: string
}

/**
 * Authentication response model.
 */
export type AuthResponse = {
  /**
   * User information
   */
  user: {
    [key: string]: unknown
  }
  /**
   * Success message
   */
  message: string
  /**
   * System API key (registration only)
   */
  api_key?: string | null
}

export type CompanyCreate = {
  name: string
  uri: string
  cik?: string | null
  database?: string | null
  sic?: string | null
  sic_description?: string | null
  category?: string | null
  state_of_incorporation?: string | null
  fiscal_year_end?: string | null
  ein?: string | null
}

/**
 * Company information in lead response.
 */
export type CompanyInfo = {
  /**
   * Company name
   */
  name: string
  /**
   * Company identifier
   */
  identifier?: string | null
}

export type CompanyListResponse = {
  companies: Array<CompanyResponse>
  total: number
  limit: number
  offset: number
}

export type CompanyRequest = {
  companyId: string
}

export type CompanyResponse = {
  identifier: string
  name: string
  uri: string
  cik?: string | null
  database?: string | null
  sic?: string | null
  sic_description?: string | null
  category?: string | null
  state_of_incorporation?: string | null
  fiscal_year_end?: string | null
  ein?: string | null
  created_at?: string | null
  updated_at?: string | null
}

export type CompanyUpdate = {
  name?: string | null
  uri?: string | null
  cik?: string | null
  database?: string | null
  sic?: string | null
  sic_description?: string | null
  category?: string | null
  state_of_incorporation?: string | null
  fiscal_year_end?: string | null
  ein?: string | null
}

export type CompanyWithGraphResponse = {
  graph_id: string
  company: CompanyResponse
}

/**
 * Request model for creating a new API key.
 */
export type CreateApiKeyRequest = {
  /**
   * Name for the API key
   */
  name: string
  /**
   * Optional description
   */
  description?: string | null
}

/**
 * Response model for creating a new API key.
 */
export type CreateApiKeyResponse = {
  /**
   * API key information
   */
  api_key: ApiKeyInfo
  /**
   * The actual API key (only shown once)
   */
  key: string
}

/**
 * Error response model.
 */
export type ErrorResponse = {
  /**
   * Error message
   */
  detail: string
}

/**
 * Graph information for user.
 */
export type GraphInfo = {
  /**
   * Graph database identifier
   */
  graphId: string
  /**
   * Display name for the graph
   */
  graphName: string
  /**
   * User's role in this graph
   */
  role: string
  /**
   * Whether this is the currently selected graph
   */
  isSelected: boolean
  /**
   * Creation timestamp
   */
  createdAt: string
}

export type HttpValidationError = {
  detail?: Array<ValidationError>
}

/**
 * Lead creation request model.
 */
export type LeadCreateRequest = {
  /**
   * Email address of the person
   */
  email: string
  /**
   * Company name
   */
  company_name?: string | null
  /**
   * Product name
   */
  product_name?: string
  /**
   * Deployment preference
   */
  deployment_preference?: string | null
  /**
   * Monthly transaction volume
   */
  transaction_volume?: string | null
  /**
   * Open source interest areas
   */
  open_source_interest?: Array<string> | null
  /**
   * Biggest challenge
   */
  challenge?: string | null
  /**
   * Lead status
   */
  status?: string | null
  /**
   * Lead source
   */
  source?: string | null
  /**
   * Additional notes
   */
  notes?: string | null
}

/**
 * Lead list response model.
 */
export type LeadListResponse = {
  leads: Array<LeadResponse>
  total: number
  limit: number
  offset: number
}

/**
 * Lead response model.
 */
export type LeadResponse = {
  /**
   * Lead ID
   */
  id: string
  /**
   * Associated person
   */
  person: PersonInfo
  /**
   * Associated company
   */
  company?: CompanyInfo | null
  /**
   * Associated product
   */
  product: ProductInfo
  /**
   * Deployment preference
   */
  deployment_preference?: string | null
  /**
   * Monthly transaction volume
   */
  transaction_volume?: string | null
  /**
   * Open source interest areas
   */
  open_source_interest?: Array<string>
  /**
   * Biggest challenge
   */
  challenge?: string | null
  /**
   * Lead status
   */
  status: string
  /**
   * Lead source
   */
  source: string
  /**
   * Additional notes
   */
  notes?: string | null
  /**
   * Creation timestamp
   */
  created_at: string
  /**
   * Last update timestamp
   */
  updated_at?: string | null
}

/**
 * Lead update request model.
 */
export type LeadUpdateRequest = {
  /**
   * Deployment preference
   */
  deployment_preference?: string | null
  /**
   * Monthly transaction volume
   */
  transaction_volume?: string | null
  /**
   * Open source interest areas
   */
  open_source_interest?: Array<string> | null
  /**
   * Biggest challenge
   */
  challenge?: string | null
  /**
   * Lead status
   */
  status?: string | null
  /**
   * Lead source
   */
  source?: string | null
  /**
   * Additional notes
   */
  notes?: string | null
}

/**
 * Login request model.
 */
export type LoginRequest = {
  /**
   * User's email address
   */
  email: string
  /**
   * User's password
   */
  password: string
}

export type Message = {
  role: string
  content: string
}

/**
 * Person information in lead response.
 */
export type PersonInfo = {
  /**
   * Person's email
   */
  email: string
  /**
   * Person's full name
   */
  full_name?: string | null
}

export type PlaidSyncRequest = {
  companyId: string
  itemId: string
}

export type ProcessSchedule = {
  processIdentifier: string
  transactionIdentifier: string
  lineitemIdentifier: string
  transactionName: string
  transactionAccount: string
  startDate: string
  numberOfMonths: number
}

/**
 * Product information in lead response.
 */
export type ProductInfo = {
  /**
   * Product name
   */
  name: string
  /**
   * Product description
   */
  description?: string | null
}

/**
 * Registration request model.
 */
export type RegisterRequest = {
  /**
   * User's display name
   */
  name: string
  /**
   * User's email address
   */
  email: string
  /**
   * User's password
   */
  password: string
}

/**
 * Request model for updating an API key.
 */
export type UpdateApiKeyRequest = {
  /**
   * New name for the API key
   */
  name?: string | null
  /**
   * New description
   */
  description?: string | null
}

/**
 * User graphs response model.
 */
export type UserGraphsResponse = {
  /**
   * List of accessible graphs
   */
  graphs: Array<GraphInfo>
  /**
   * Currently selected graph ID
   */
  selectedGraphId?: string | null
}

/**
 * User information response model.
 */
export type UserResponse = {
  /**
   * Unique identifier for the user
   */
  id: string
  /**
   * User's display name
   */
  name?: string | null
  /**
   * User's email address
   */
  email?: string | null
  /**
   * User's authentication accounts
   */
  accounts?: Array<AccountInfo>
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type RegisterUserData = {
  body: RegisterRequest
  path?: never
  query?: never
  url: '/v1/auth/register'
}

export type RegisterUserErrors = {
  /**
   * Invalid request data
   */
  400: ErrorResponse
  /**
   * Email already registered
   */
  409: ErrorResponse
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type RegisterUserError = RegisterUserErrors[keyof RegisterUserErrors]

export type RegisterUserResponses = {
  /**
   * Successful Response
   */
  201: AuthResponse
}

export type RegisterUserResponse =
  RegisterUserResponses[keyof RegisterUserResponses]

export type LoginUserData = {
  body: LoginRequest
  path?: never
  query?: never
  url: '/v1/auth/login'
}

export type LoginUserErrors = {
  /**
   * Invalid request data
   */
  400: ErrorResponse
  /**
   * Invalid credentials
   */
  401: ErrorResponse
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type LoginUserError = LoginUserErrors[keyof LoginUserErrors]

export type LoginUserResponses = {
  /**
   * Successful Response
   */
  200: AuthResponse
}

export type LoginUserResponse = LoginUserResponses[keyof LoginUserResponses]

export type LogoutUserData = {
  body?: never
  path?: never
  query?: never
  url: '/v1/auth/logout'
}

export type LogoutUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type LogoutUserError = LogoutUserErrors[keyof LogoutUserErrors]

export type LogoutUserResponses = {
  /**
   * Successful Response
   */
  200: {
    [key: string]: unknown
  }
}

export type LogoutUserResponse = LogoutUserResponses[keyof LogoutUserResponses]

export type GetCurrentAuthUserData = {
  body?: never
  path?: never
  query?: never
  url: '/v1/auth/me'
}

export type GetCurrentAuthUserErrors = {
  /**
   * Not authenticated
   */
  401: ErrorResponse
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetCurrentAuthUserError =
  GetCurrentAuthUserErrors[keyof GetCurrentAuthUserErrors]

export type GetCurrentAuthUserResponses = {
  /**
   * Successful Response
   */
  200: {
    [key: string]: unknown
  }
}

export type GetCurrentAuthUserResponse =
  GetCurrentAuthUserResponses[keyof GetCurrentAuthUserResponses]

export type RefreshSessionData = {
  body?: never
  path?: never
  query?: never
  url: '/v1/auth/refresh'
}

export type RefreshSessionErrors = {
  /**
   * Not authenticated
   */
  401: ErrorResponse
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type RefreshSessionError =
  RefreshSessionErrors[keyof RefreshSessionErrors]

export type RefreshSessionResponses = {
  /**
   * Successful Response
   */
  200: AuthResponse
}

export type RefreshSessionResponse =
  RefreshSessionResponses[keyof RefreshSessionResponses]

export type AgentQueryData = {
  body: AgentRequest
  path?: never
  query?: never
  url: '/v1/agent/'
}

export type AgentQueryErrors = {
  /**
   * Not found
   */
  404: unknown
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AgentQueryError = AgentQueryErrors[keyof AgentQueryErrors]

export type AgentQueryResponses = {
  /**
   * Successful Response
   */
  200: AgentResponse
}

export type AgentQueryResponse = AgentQueryResponses[keyof AgentQueryResponses]

export type OpenaiAgentQueryData = {
  body: AgentRequest
  path?: never
  query?: never
  url: '/v1/agent/openai'
}

export type OpenaiAgentQueryErrors = {
  /**
   * Not found
   */
  404: unknown
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type OpenaiAgentQueryError =
  OpenaiAgentQueryErrors[keyof OpenaiAgentQueryErrors]

export type OpenaiAgentQueryResponses = {
  /**
   * Successful Response
   */
  200: AgentResponse
}

export type OpenaiAgentQueryResponse =
  OpenaiAgentQueryResponses[keyof OpenaiAgentQueryResponses]

export type AnthropicAgentQueryData = {
  body: AgentRequest
  path?: never
  query?: never
  url: '/v1/agent/anthropic'
}

export type AnthropicAgentQueryErrors = {
  /**
   * Not found
   */
  404: unknown
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AnthropicAgentQueryError =
  AnthropicAgentQueryErrors[keyof AnthropicAgentQueryErrors]

export type AnthropicAgentQueryResponses = {
  /**
   * Successful Response
   */
  200: AgentResponse
}

export type AnthropicAgentQueryResponse =
  AnthropicAgentQueryResponses[keyof AnthropicAgentQueryResponses]

export type CreateScheduleData = {
  body: ProcessSchedule
  path?: never
  query?: never
  url: '/v1/schedule/schedule'
}

export type CreateScheduleErrors = {
  /**
   * Not found
   */
  404: unknown
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateScheduleError =
  CreateScheduleErrors[keyof CreateScheduleErrors]

export type CreateScheduleResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type SecSyncData = {
  body: CompanyRequest
  path?: never
  query?: never
  url: '/v1/sync/sec'
}

export type SecSyncErrors = {
  /**
   * Not found
   */
  404: unknown
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type SecSyncError = SecSyncErrors[keyof SecSyncErrors]

export type SecSyncResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type QuickbooksSyncData = {
  body: CompanyRequest
  path?: never
  query?: never
  url: '/v1/sync/qb'
}

export type QuickbooksSyncErrors = {
  /**
   * Not found
   */
  404: unknown
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type QuickbooksSyncError =
  QuickbooksSyncErrors[keyof QuickbooksSyncErrors]

export type QuickbooksSyncResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type PlaidSyncData = {
  body: PlaidSyncRequest
  path?: never
  query?: never
  url: '/v1/sync/plaid'
}

export type PlaidSyncErrors = {
  /**
   * Not found
   */
  404: unknown
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type PlaidSyncError = PlaidSyncErrors[keyof PlaidSyncErrors]

export type PlaidSyncResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type GetServiceStatusData = {
  body?: never
  path?: never
  query?: never
  url: '/v1/status'
}

export type GetServiceStatusResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type GetCurrentUserData = {
  body?: never
  path?: never
  query?: never
  url: '/v1/user/'
}

export type GetCurrentUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetCurrentUserError =
  GetCurrentUserErrors[keyof GetCurrentUserErrors]

export type GetCurrentUserResponses = {
  /**
   * Successful Response
   */
  200: UserResponse
}

export type GetCurrentUserResponse =
  GetCurrentUserResponses[keyof GetCurrentUserResponses]

export type GetUserGraphsData = {
  body?: never
  path?: never
  query?: never
  url: '/v1/user/graphs'
}

export type GetUserGraphsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetUserGraphsError = GetUserGraphsErrors[keyof GetUserGraphsErrors]

export type GetUserGraphsResponses = {
  /**
   * Successful Response
   */
  200: UserGraphsResponse
}

export type GetUserGraphsResponse =
  GetUserGraphsResponses[keyof GetUserGraphsResponses]

export type SelectUserGraphData = {
  body?: never
  path: {
    graph_id: string
  }
  query?: never
  url: '/v1/user/graphs/select/{graph_id}'
}

export type SelectUserGraphErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type SelectUserGraphError =
  SelectUserGraphErrors[keyof SelectUserGraphErrors]

export type SelectUserGraphResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type ListUserApiKeysData = {
  body?: never
  path?: never
  query?: never
  url: '/v1/user/api-keys'
}

export type ListUserApiKeysErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ListUserApiKeysError =
  ListUserApiKeysErrors[keyof ListUserApiKeysErrors]

export type ListUserApiKeysResponses = {
  /**
   * Successful Response
   */
  200: ApiKeysResponse
}

export type ListUserApiKeysResponse =
  ListUserApiKeysResponses[keyof ListUserApiKeysResponses]

export type CreateUserApiKeyData = {
  body: CreateApiKeyRequest
  path?: never
  query?: never
  url: '/v1/user/api-keys'
}

export type CreateUserApiKeyErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateUserApiKeyError =
  CreateUserApiKeyErrors[keyof CreateUserApiKeyErrors]

export type CreateUserApiKeyResponses = {
  /**
   * Successful Response
   */
  201: CreateApiKeyResponse
}

export type CreateUserApiKeyResponse =
  CreateUserApiKeyResponses[keyof CreateUserApiKeyResponses]

export type RevokeUserApiKeyData = {
  body?: never
  path: {
    api_key_id: string
  }
  query?: never
  url: '/v1/user/api-keys/{api_key_id}'
}

export type RevokeUserApiKeyErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type RevokeUserApiKeyError =
  RevokeUserApiKeyErrors[keyof RevokeUserApiKeyErrors]

export type RevokeUserApiKeyResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type UpdateUserApiKeyData = {
  body: UpdateApiKeyRequest
  path: {
    api_key_id: string
  }
  query?: never
  url: '/v1/user/api-keys/{api_key_id}'
}

export type UpdateUserApiKeyErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UpdateUserApiKeyError =
  UpdateUserApiKeyErrors[keyof UpdateUserApiKeyErrors]

export type UpdateUserApiKeyResponses = {
  /**
   * Successful Response
   */
  200: ApiKeyInfo
}

export type UpdateUserApiKeyResponse =
  UpdateUserApiKeyResponses[keyof UpdateUserApiKeyResponses]

export type ListCompaniesData = {
  body?: never
  path: {
    /**
     * Graph database identifier
     */
    graph_id: string
  }
  query?: {
    limit?: number
    offset?: number
    search?: string | null
  }
  url: '/v1/{graph_id}/company/'
}

export type ListCompaniesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ListCompaniesError = ListCompaniesErrors[keyof ListCompaniesErrors]

export type ListCompaniesResponses = {
  /**
   * Successful Response
   */
  200: CompanyListResponse
}

export type ListCompaniesResponse =
  ListCompaniesResponses[keyof ListCompaniesResponses]

export type CreateCompanyData = {
  body: CompanyCreate
  path: {
    /**
     * Graph database identifier
     */
    graph_id: string
  }
  query?: never
  url: '/v1/{graph_id}/company/'
}

export type CreateCompanyErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateCompanyError = CreateCompanyErrors[keyof CreateCompanyErrors]

export type CreateCompanyResponses = {
  /**
   * Successful Response
   */
  201: CompanyResponse
}

export type CreateCompanyResponse =
  CreateCompanyResponses[keyof CreateCompanyResponses]

export type DeleteCompanyData = {
  body?: never
  path: {
    /**
     * Graph database identifier
     */
    graph_id: string
    /**
     * Company identifier
     */
    company_id: string
  }
  query?: never
  url: '/v1/{graph_id}/company/{company_id}'
}

export type DeleteCompanyErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DeleteCompanyError = DeleteCompanyErrors[keyof DeleteCompanyErrors]

export type DeleteCompanyResponses = {
  /**
   * Successful Response
   */
  204: void
}

export type DeleteCompanyResponse =
  DeleteCompanyResponses[keyof DeleteCompanyResponses]

export type GetCompanyData = {
  body?: never
  path: {
    /**
     * Graph database identifier
     */
    graph_id: string
    /**
     * Company identifier
     */
    company_id: string
  }
  query?: never
  url: '/v1/{graph_id}/company/{company_id}'
}

export type GetCompanyErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetCompanyError = GetCompanyErrors[keyof GetCompanyErrors]

export type GetCompanyResponses = {
  /**
   * Successful Response
   */
  200: CompanyResponse
}

export type GetCompanyResponse = GetCompanyResponses[keyof GetCompanyResponses]

export type UpdateCompanyData = {
  body: CompanyUpdate
  path: {
    /**
     * Graph database identifier
     */
    graph_id: string
    /**
     * Company identifier
     */
    company_id: string
  }
  query?: never
  url: '/v1/{graph_id}/company/{company_id}'
}

export type UpdateCompanyErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UpdateCompanyError = UpdateCompanyErrors[keyof UpdateCompanyErrors]

export type UpdateCompanyResponses = {
  /**
   * Successful Response
   */
  200: CompanyResponse
}

export type UpdateCompanyResponse =
  UpdateCompanyResponses[keyof UpdateCompanyResponses]

export type GetCompanyHealthData = {
  body?: never
  path: {
    /**
     * Graph database identifier
     */
    graph_id: string
    /**
     * Company identifier
     */
    company_id: string
  }
  query?: never
  url: '/v1/{graph_id}/company/{company_id}/health'
}

export type GetCompanyHealthErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetCompanyHealthError =
  GetCompanyHealthErrors[keyof GetCompanyHealthErrors]

export type GetCompanyHealthResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type GetLeadsData = {
  body?: never
  path: {
    /**
     * Graph database ID
     */
    graph_id: string
  }
  query?: {
    limit?: number
    offset?: number
    status?: string | null
  }
  url: '/v1/{graph_id}/lead/'
}

export type GetLeadsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetLeadsError = GetLeadsErrors[keyof GetLeadsErrors]

export type GetLeadsResponses = {
  /**
   * Successful Response
   */
  200: LeadListResponse
}

export type GetLeadsResponse = GetLeadsResponses[keyof GetLeadsResponses]

export type CreateLeadData = {
  body: LeadCreateRequest
  path: {
    /**
     * Graph database ID
     */
    graph_id: string
  }
  query?: never
  url: '/v1/{graph_id}/lead/'
}

export type CreateLeadErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateLeadError = CreateLeadErrors[keyof CreateLeadErrors]

export type CreateLeadResponses = {
  /**
   * Successful Response
   */
  201: LeadResponse
}

export type CreateLeadResponse = CreateLeadResponses[keyof CreateLeadResponses]

export type DeleteLeadData = {
  body?: never
  path: {
    /**
     * Lead identifier
     */
    lead_id: string
    graph_id: string
  }
  query?: never
  url: '/v1/{graph_id}/lead/{lead_id}'
}

export type DeleteLeadErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DeleteLeadError = DeleteLeadErrors[keyof DeleteLeadErrors]

export type DeleteLeadResponses = {
  /**
   * Successful Response
   */
  204: void
}

export type DeleteLeadResponse = DeleteLeadResponses[keyof DeleteLeadResponses]

export type GetLeadData = {
  body?: never
  path: {
    /**
     * Lead identifier
     */
    lead_id: string
    /**
     * Graph database ID
     */
    graph_id: string
  }
  query?: never
  url: '/v1/{graph_id}/lead/{lead_id}'
}

export type GetLeadErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetLeadError = GetLeadErrors[keyof GetLeadErrors]

export type GetLeadResponses = {
  /**
   * Successful Response
   */
  200: LeadResponse
}

export type GetLeadResponse = GetLeadResponses[keyof GetLeadResponses]

export type UpdateLeadData = {
  body: LeadUpdateRequest
  path: {
    /**
     * Lead identifier
     */
    lead_id: string
    graph_id: string
  }
  query?: never
  url: '/v1/{graph_id}/lead/{lead_id}'
}

export type UpdateLeadErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UpdateLeadError = UpdateLeadErrors[keyof UpdateLeadErrors]

export type UpdateLeadResponses = {
  /**
   * Successful Response
   */
  200: LeadResponse
}

export type UpdateLeadResponse = UpdateLeadResponses[keyof UpdateLeadResponses]

export type CreateCompanyWithNewGraphData = {
  body: CompanyCreate
  path?: never
  query?: never
  url: '/v1/company/with-new-graph'
}

export type CreateCompanyWithNewGraphErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateCompanyWithNewGraphError =
  CreateCompanyWithNewGraphErrors[keyof CreateCompanyWithNewGraphErrors]

export type CreateCompanyWithNewGraphResponses = {
  /**
   * Successful Response
   */
  201: CompanyWithGraphResponse
}

export type CreateCompanyWithNewGraphResponse =
  CreateCompanyWithNewGraphResponses[keyof CreateCompanyWithNewGraphResponses]

export type ClientOptions = {
  baseUrl: 'http://localhost:8000'
}
